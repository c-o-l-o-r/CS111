Name: Vu Cu
ID: 504669405

Graph1: using the dataset in make test5
gprof profiling report: Generating by make test6,
make test7.

QUESTION 2C.1A: threads/lists ratio vs per operation
time has quadratic relationship, in synchronized method.
The reason is that, as each thread access a list,
the lock make sure that no other thread can operate
on the list, thus it eliminates the benefits of parallel.
Also, SortedList_insert, SortedList_lookup grows
as the list get bigger. Hence the worker thread is O(N^2).

QUESTION 2C.1B: because it also explain why increase
the number of list improve performance. The reason
is that when a thread operates on a list, another 
thread might operate on a different list, thus parallel
still happens. The more lists, the more likely this
happens, decreasing the time per operation.

QUESTION 2C.2A: The number of list is inversely proportional
to the time per operation.
SortedList_lookup_mutex and SortedList_insert_mutex is the 
bottleneck, when the number of list is small (--threads=10).
When the number of list becomes much larger (>50), they no
longer are the bottleneck. Instead, hash function is the 
bottlenect.
The reason is as above. When a thread operates on a list, another 
thread might operate on a different list, thus parallel
still happens. The more lists, the more likely this
happens, decreasing the time per operation.

QUESTION 2C.2B: The spinlock has higher time per operation. 
Reason: Imagine the case where the thread holding 
the lock is pre-empted within a critical section. The 
scheduler might then run every other thread (imagine 
there are N âˆ’ 1 others), each of which tries to acquire
the lock. In this case, each of those threads will spin 
for the duration of a time slice before giving up the CPU.

QUESTIONS 2C.3A: Because of possible race condition: other thread 
can make the checking variable becomes true before pthread_cond_wait.
So we have to hold the mutex to make sure that checking the variable
and pthread_cond_wait is done atomically.

QUESTION 2C.3B: The mutex is used to protect the condition variable.
The mutex be released when the waiting thread is blocked, so other
threads can access the condition variable. Otherwise other threads
cannot access the condition variable, cannot change it, and the
waiting thread will never wake up.

QUESTION 2C.3C: The calling thread might be woken up in the middle 
of critical section code, and should have the lock before proceeding.
 Also, when it goes to sleep, it must release the associated lock so 
it's natural fo it to reacquire the lock.

QUESTION 2C.3D: Because of possible race condition: If the caller releases 
its mutex before calling pthread_cond_wait, between the time waking up
and the time it takes to lock the mutex, another thread might make the 
condition variable false. So it will falsely execute even when the 
condition variable is false. 
If the mutex release inside of pthread_cond_wait, it will guarantee to
atomically execute  release and gain the mutex, so no
other thread can gain the mutex before the caller does, when the condition
becomes true. 

QUESTION 2C.3E: Yes, but it will be inefficient.

	bool condition = false;
	pthread_mutex_lock(&mutex);
	while (!condition) {
		pthread_mutex_unlock(&mutex);
		sleep(x);
		pthread_mutex_lock(&mutex);
	}
	pthread_mutex_unlock(&mutex);

It's inefficient because it sleeps. It doesn't block in right amount of time.
it can only be implemented by a system call because we need cooperation from 
the scheduler to block the right amount of time, and the calling thread get 
the mutex first when it unblock Otherwise some other thread may take the mutex 
first and change the condition variable. 


////////////////////////////////////////////////////////////////////
gprof profiling report, unprotected
////////////////////////////////////////////////////////////////////
1 lists
10 threads x 1000 iterations x (insert + lookup/delete) = 20000 operations
elapsed time: 91378774 ns
per operation: 4569 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 56.59      0.13     0.13     9337    13.94    13.94  SortedList_lookup
 34.82      0.21     0.08     9089     8.81     8.81  SortedList_insert
  4.35      0.22     0.01    18131     0.55     0.55  hash
  4.35      0.23     0.01       20   500.57   500.57  SortedList_length
  0.00      0.23     0.00     9451     0.00     0.00  SortedList_delete
  0.00      0.23     0.00     9060     0.00     0.00  new_element

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 4.34% of 0.23 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.8    0.00    0.23                 worker [1]
                0.13    0.00    9337/9337        SortedList_lookup [2]
                0.08    0.00    9089/9089        SortedList_insert [3]
                0.01    0.00   18131/18131       hash [4]
                0.01    0.00      19/20          SortedList_length [5]
                0.00    0.00    9451/9451        SortedList_delete [7]
                0.00    0.00    9059/9060        new_element [8]
-----------------------------------------------
                0.13    0.00    9337/9337        worker [1]
[2]     56.5    0.13    0.00    9337         SortedList_lookup [2]
-----------------------------------------------
                0.08    0.00    9089/9089        worker [1]
[3]     34.8    0.08    0.00    9089         SortedList_insert [3]
-----------------------------------------------
                0.01    0.00   18131/18131       worker [1]
[4]      4.3    0.01    0.00   18131         hash [4]
-----------------------------------------------
                0.00    0.00       1/20          main [6]
                0.01    0.00      19/20          worker [1]
[5]      4.3    0.01    0.00      20         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      0.2    0.00    0.00                 main [6]
                0.00    0.00       1/20          SortedList_length [5]
                0.00    0.00       1/9060        new_element [8]
-----------------------------------------------
                0.00    0.00    9451/9451        worker [1]
[7]      0.0    0.00    0.00    9451         SortedList_delete [7]
-----------------------------------------------
                0.00    0.00       1/9060        main [6]
                0.00    0.00    9059/9060        worker [1]
[8]      0.0    0.00    0.00    9060         new_element [8]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete       [5] SortedList_length       [4] hash
   [3] SortedList_insert       [2] SortedList_lookup       [8] new_element

   
////////////////////////////////////////////////////////////////////
gprof profiling report, --sync=m
////////////////////////////////////////////////////////////////////


1 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 6915912719 ns
per operation: 115265 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 55.62      0.55     0.55    29995    18.36    18.36  SortedList_lookup_mutex
 41.46      0.96     0.41    29976    13.69    13.69  SortedList_insert_mutex
  2.02      0.98     0.02                             main
  1.01      0.99     0.01                             worker
  0.00      0.99     0.00    59956     0.00     0.00  hash
  0.00      0.99     0.00    29998     0.00     0.00  SortedList_delete_mutex
  0.00      0.99     0.00    29965     0.00     0.00  new_element
  0.00      0.99     0.00       21     0.00     0.00  SortedList_length
  0.00      0.99     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.01% of 0.99 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     98.0    0.01    0.96                 worker [1]
                0.55    0.00   29995/29995       SortedList_lookup_mutex [2]
                0.41    0.00   29976/29976       SortedList_insert_mutex [3]
                0.00    0.00   59956/59956       hash [5]
                0.00    0.00   29998/29998       SortedList_delete_mutex [6]
                0.00    0.00   29964/29965       new_element [7]
                0.00    0.00      20/21          SortedList_length [8]
-----------------------------------------------
                0.55    0.00   29995/29995       worker [1]
[2]     55.6    0.55    0.00   29995         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.41    0.00   29976/29976       worker [1]
[3]     41.4    0.41    0.00   29976         SortedList_insert_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      2.0    0.02    0.00                 main [4]
                0.00    0.00       1/29965       new_element [7]
                0.00    0.00       1/1           SortedList_mutex_init [9]
                0.00    0.00       1/21          SortedList_length [8]
-----------------------------------------------
                0.00    0.00   59956/59956       worker [1]
[5]      0.0    0.00    0.00   59956         hash [5]
-----------------------------------------------
                0.00    0.00   29998/29998       worker [1]
[6]      0.0    0.00    0.00   29998         SortedList_delete_mutex [6]
-----------------------------------------------
                0.00    0.00       1/29965       main [4]
                0.00    0.00   29964/29965       worker [1]
[7]      0.0    0.00    0.00   29965         new_element [7]
-----------------------------------------------
                0.00    0.00       1/21          main [4]
                0.00    0.00      20/21          worker [1]
[8]      0.0    0.00    0.00      21         SortedList_length [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] SortedList_delete_mutex [2] SortedList_lookup_mutex [4] main
   [3] SortedList_insert_mutex [9] SortedList_mutex_init   [7] new_element
   [8] SortedList_length       [5] hash                    [1] worker
2 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 3047537903 ns
per operation: 50792 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 48.81      0.39     0.39    29688    13.15    13.15  SortedList_insert_mutex
 41.30      0.72     0.33    29741    11.11    11.11  SortedList_lookup_mutex
  3.75      0.75     0.03    59511     0.50     0.50  hash
  3.75      0.78     0.03                             main
  2.50      0.80     0.02       42   476.74   476.74  SortedList_length
  0.00      0.80     0.00    29830     0.00     0.00  SortedList_delete_mutex
  0.00      0.80     0.00    29777     0.00     0.00  new_element
  0.00      0.80     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.25% of 0.80 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.1    0.00    0.77                 worker [1]
                0.39    0.00   29688/29688       SortedList_insert_mutex [2]
                0.33    0.00   29741/29741       SortedList_lookup_mutex [3]
                0.03    0.00   59511/59511       hash [5]
                0.02    0.00      40/42          SortedList_length [6]
                0.00    0.00   29830/29830       SortedList_delete_mutex [7]
                0.00    0.00   29775/29777       new_element [8]
-----------------------------------------------
                0.39    0.00   29688/29688       worker [1]
[2]     48.8    0.39    0.00   29688         SortedList_insert_mutex [2]
-----------------------------------------------
                0.33    0.00   29741/29741       worker [1]
[3]     41.3    0.33    0.00   29741         SortedList_lookup_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      3.9    0.03    0.00                 main [4]
                0.00    0.00       2/42          SortedList_length [6]
                0.00    0.00       2/29777       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.03    0.00   59511/59511       worker [1]
[5]      3.8    0.03    0.00   59511         hash [5]
-----------------------------------------------
                0.00    0.00       2/42          main [4]
                0.02    0.00      40/42          worker [1]
[6]      2.5    0.02    0.00      42         SortedList_length [6]
-----------------------------------------------
                0.00    0.00   29830/29830       worker [1]
[7]      0.0    0.00    0.00   29830         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00       2/29777       main [4]
                0.00    0.00   29775/29777       worker [1]
[8]      0.0    0.00    0.00   29777         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [3] SortedList_lookup_mutex [4] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [6] SortedList_length       [5] hash
3 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 1599815873 ns
per operation: 26664 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 46.48      0.26     0.26    29411     8.85     8.85  SortedList_insert_mutex
 44.69      0.51     0.25    29416     8.51     8.51  SortedList_lookup_mutex
  3.58      0.53     0.02       63   317.82   317.82  SortedList_length
  3.58      0.55     0.02                             main
  1.79      0.56     0.01    58840     0.17     0.17  hash
  0.00      0.56     0.00    29526     0.00     0.00  SortedList_delete_mutex
  0.00      0.56     0.00    29500     0.00     0.00  new_element
  0.00      0.56     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.78% of 0.56 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.3    0.00    0.54                 worker [1]
                0.26    0.00   29411/29411       SortedList_insert_mutex [2]
                0.25    0.00   29416/29416       SortedList_lookup_mutex [3]
                0.02    0.00      60/63          SortedList_length [5]
                0.01    0.00   58840/58840       hash [6]
                0.00    0.00   29526/29526       SortedList_delete_mutex [7]
                0.00    0.00   29497/29500       new_element [8]
-----------------------------------------------
                0.26    0.00   29411/29411       worker [1]
[2]     46.4    0.26    0.00   29411         SortedList_insert_mutex [2]
-----------------------------------------------
                0.25    0.00   29416/29416       worker [1]
[3]     44.6    0.25    0.00   29416         SortedList_lookup_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      3.7    0.02    0.00                 main [4]
                0.00    0.00       3/63          SortedList_length [5]
                0.00    0.00       3/29500       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00       3/63          main [4]
                0.02    0.00      60/63          worker [1]
[5]      3.6    0.02    0.00      63         SortedList_length [5]
-----------------------------------------------
                0.01    0.00   58840/58840       worker [1]
[6]      1.8    0.01    0.00   58840         hash [6]
-----------------------------------------------
                0.00    0.00   29526/29526       worker [1]
[7]      0.0    0.00    0.00   29526         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00       3/29500       main [4]
                0.00    0.00   29497/29500       worker [1]
[8]      0.0    0.00    0.00   29500         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [3] SortedList_lookup_mutex [4] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [5] SortedList_length       [6] hash
4 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 988255994 ns
per operation: 16471 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 46.61      0.27     0.27    28859     9.37     9.37  SortedList_insert_mutex
 44.88      0.53     0.26    29012     8.97     8.97  SortedList_lookup_mutex
  5.18      0.56     0.03       84   357.55   357.55  SortedList_length
  3.45      0.58     0.02                             main
  0.00      0.58     0.00    57952     0.00     0.00  hash
  0.00      0.58     0.00    29065     0.00     0.00  SortedList_delete_mutex
  0.00      0.58     0.00    28999     0.00     0.00  new_element
  0.00      0.58     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.72% of 0.58 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.3    0.00    0.56                 worker [1]
                0.27    0.00   28859/28859       SortedList_insert_mutex [2]
                0.26    0.00   29012/29012       SortedList_lookup_mutex [3]
                0.03    0.00      80/84          SortedList_length [4]
                0.00    0.00   57952/57952       hash [6]
                0.00    0.00   29065/29065       SortedList_delete_mutex [7]
                0.00    0.00   28995/28999       new_element [8]
-----------------------------------------------
                0.27    0.00   28859/28859       worker [1]
[2]     46.6    0.27    0.00   28859         SortedList_insert_mutex [2]
-----------------------------------------------
                0.26    0.00   29012/29012       worker [1]
[3]     44.8    0.26    0.00   29012         SortedList_lookup_mutex [3]
-----------------------------------------------
                0.00    0.00       4/84          main [5]
                0.03    0.00      80/84          worker [1]
[4]      5.2    0.03    0.00      84         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      3.7    0.02    0.00                 main [5]
                0.00    0.00       4/84          SortedList_length [4]
                0.00    0.00       4/28999       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   57952/57952       worker [1]
[6]      0.0    0.00    0.00   57952         hash [6]
-----------------------------------------------
                0.00    0.00   29065/29065       worker [1]
[7]      0.0    0.00    0.00   29065         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00       4/28999       main [5]
                0.00    0.00   28995/28999       worker [1]
[8]      0.0    0.00    0.00   28999         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [3] SortedList_lookup_mutex [5] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [4] SortedList_length       [6] hash
5 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 743135898 ns
per operation: 12386 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 51.22      0.22     0.22    28508     7.73     7.73  SortedList_lookup_mutex
 37.25      0.38     0.16    28471     5.63     5.63  SortedList_insert_mutex
  4.66      0.40     0.02    57090     0.35     0.35  hash
  2.33      0.41     0.01      104    96.26    96.26  SortedList_length
  2.33      0.42     0.01                             main
  2.33      0.43     0.01                             worker
  0.00      0.43     0.00    28741     0.00     0.00  SortedList_delete_mutex
  0.00      0.43     0.00    28684     0.00     0.00  new_element
  0.00      0.43     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 2.32% of 0.43 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     97.6    0.01    0.41                 worker [1]
                0.22    0.00   28508/28508       SortedList_lookup_mutex [2]
                0.16    0.00   28471/28471       SortedList_insert_mutex [3]
                0.02    0.00   57090/57090       hash [4]
                0.01    0.00      99/104         SortedList_length [6]
                0.00    0.00   28741/28741       SortedList_delete_mutex [7]
                0.00    0.00   28679/28684       new_element [8]
-----------------------------------------------
                0.22    0.00   28508/28508       worker [1]
[2]     51.2    0.22    0.00   28508         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.16    0.00   28471/28471       worker [1]
[3]     37.2    0.16    0.00   28471         SortedList_insert_mutex [3]
-----------------------------------------------
                0.02    0.00   57090/57090       worker [1]
[4]      4.7    0.02    0.00   57090         hash [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      2.4    0.01    0.00                 main [5]
                0.00    0.00       5/104         SortedList_length [6]
                0.00    0.00       5/28684       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00       5/104         main [5]
                0.01    0.00      99/104         worker [1]
[6]      2.3    0.01    0.00     104         SortedList_length [6]
-----------------------------------------------
                0.00    0.00   28741/28741       worker [1]
[7]      0.0    0.00    0.00   28741         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00       5/28684       main [5]
                0.00    0.00   28679/28684       worker [1]
[8]      0.0    0.00    0.00   28684         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [2] SortedList_lookup_mutex [5] main
   [3] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [6] SortedList_length       [4] hash                    [1] worker
6 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 557181406 ns
per operation: 9286 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 52.44      0.22     0.22    28372     7.76     7.76  SortedList_lookup_mutex
 35.76      0.37     0.15    28060     5.35     5.35  SortedList_insert_mutex
  4.77      0.39     0.02      126   158.91   158.91  SortedList_length
  4.77      0.41     0.02                             worker
  2.38      0.42     0.01                             main
  0.00      0.42     0.00    56372     0.00     0.00  hash
  0.00      0.42     0.00    28506     0.00     0.00  SortedList_delete_mutex
  0.00      0.42     0.00    28193     0.00     0.00  new_element
  0.00      0.42     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 2.38% of 0.42 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     97.4    0.02    0.39                 worker [1]
                0.22    0.00   28372/28372       SortedList_lookup_mutex [2]
                0.15    0.00   28060/28060       SortedList_insert_mutex [3]
                0.02    0.00     120/126         SortedList_length [4]
                0.00    0.00   56372/56372       hash [6]
                0.00    0.00   28506/28506       SortedList_delete_mutex [7]
                0.00    0.00   28187/28193       new_element [8]
-----------------------------------------------
                0.22    0.00   28372/28372       worker [1]
[2]     52.4    0.22    0.00   28372         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.15    0.00   28060/28060       worker [1]
[3]     35.7    0.15    0.00   28060         SortedList_insert_mutex [3]
-----------------------------------------------
                0.00    0.00       6/126         main [5]
                0.02    0.00     120/126         worker [1]
[4]      4.8    0.02    0.00     126         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      2.6    0.01    0.00                 main [5]
                0.00    0.00       6/126         SortedList_length [4]
                0.00    0.00       6/28193       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   56372/56372       worker [1]
[6]      0.0    0.00    0.00   56372         hash [6]
-----------------------------------------------
                0.00    0.00   28506/28506       worker [1]
[7]      0.0    0.00    0.00   28506         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00       6/28193       main [5]
                0.00    0.00   28187/28193       worker [1]
[8]      0.0    0.00    0.00   28193         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [2] SortedList_lookup_mutex [5] main
   [3] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [4] SortedList_length       [6] hash                    [1] worker
7 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 422899249 ns
per operation: 7048 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 51.91      0.14     0.14    27560     5.09     5.09  SortedList_insert_mutex
 40.79      0.25     0.11    27864     3.95     3.95  SortedList_lookup_mutex
  3.71      0.26     0.01    55578     0.18     0.18  hash
  3.71      0.27     0.01                             main
  0.00      0.27     0.00    28042     0.00     0.00  SortedList_delete_mutex
  0.00      0.27     0.00    27649     0.00     0.00  new_element
  0.00      0.27     0.00      146     0.00     0.00  SortedList_length
  0.00      0.27     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 3.70% of 0.27 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.3    0.00    0.26                 worker [1]
                0.14    0.00   27560/27560       SortedList_insert_mutex [2]
                0.11    0.00   27864/27864       SortedList_lookup_mutex [3]
                0.01    0.00   55578/55578       hash [4]
                0.00    0.00   28042/28042       SortedList_delete_mutex [6]
                0.00    0.00   27642/27649       new_element [7]
                0.00    0.00     139/146         SortedList_length [8]
-----------------------------------------------
                0.14    0.00   27560/27560       worker [1]
[2]     51.9    0.14    0.00   27560         SortedList_insert_mutex [2]
-----------------------------------------------
                0.11    0.00   27864/27864       worker [1]
[3]     40.7    0.11    0.00   27864         SortedList_lookup_mutex [3]
-----------------------------------------------
                0.01    0.00   55578/55578       worker [1]
[4]      3.7    0.01    0.00   55578         hash [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      3.7    0.01    0.00                 main [5]
                0.00    0.00       7/27649       new_element [7]
                0.00    0.00       7/146         SortedList_length [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   28042/28042       worker [1]
[6]      0.0    0.00    0.00   28042         SortedList_delete_mutex [6]
-----------------------------------------------
                0.00    0.00       7/27649       main [5]
                0.00    0.00   27642/27649       worker [1]
[7]      0.0    0.00    0.00   27649         new_element [7]
-----------------------------------------------
                0.00    0.00       7/146         main [5]
                0.00    0.00     139/146         worker [1]
[8]      0.0    0.00    0.00     146         SortedList_length [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] SortedList_delete_mutex [3] SortedList_lookup_mutex [5] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [7] new_element
   [8] SortedList_length       [4] hash
8 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 362212561 ns
per operation: 6037 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 45.77      0.16     0.16    27272     5.87     5.87  SortedList_insert_mutex
 42.91      0.31     0.15    27429     5.47     5.47  SortedList_lookup_mutex
  5.72      0.33     0.02      164   122.09   122.09  SortedList_length
  2.86      0.34     0.01    54690     0.18     0.18  hash
  2.86      0.35     0.01                             main
  0.00      0.35     0.00    27657     0.00     0.00  SortedList_delete_mutex
  0.00      0.35     0.00    27468     0.00     0.00  new_element
  0.00      0.35     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 2.85% of 0.35 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.9    0.00    0.34                 worker [1]
                0.16    0.00   27272/27272       SortedList_insert_mutex [2]
                0.15    0.00   27429/27429       SortedList_lookup_mutex [3]
                0.02    0.00     156/164         SortedList_length [4]
                0.01    0.00   54690/54690       hash [6]
                0.00    0.00   27657/27657       SortedList_delete_mutex [7]
                0.00    0.00   27460/27468       new_element [8]
-----------------------------------------------
                0.16    0.00   27272/27272       worker [1]
[2]     45.7    0.16    0.00   27272         SortedList_insert_mutex [2]
-----------------------------------------------
                0.15    0.00   27429/27429       worker [1]
[3]     42.9    0.15    0.00   27429         SortedList_lookup_mutex [3]
-----------------------------------------------
                0.00    0.00       8/164         main [5]
                0.02    0.00     156/164         worker [1]
[4]      5.7    0.02    0.00     164         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      3.1    0.01    0.00                 main [5]
                0.00    0.00       8/164         SortedList_length [4]
                0.00    0.00       8/27468       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.01    0.00   54690/54690       worker [1]
[6]      2.9    0.01    0.00   54690         hash [6]
-----------------------------------------------
                0.00    0.00   27657/27657       worker [1]
[7]      0.0    0.00    0.00   27657         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00       8/27468       main [5]
                0.00    0.00   27460/27468       worker [1]
[8]      0.0    0.00    0.00   27468         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [3] SortedList_lookup_mutex [5] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [4] SortedList_length       [6] hash
9 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 307630793 ns
per operation: 5127 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 53.39      0.16     0.16    27068     5.92     5.92  SortedList_lookup_mutex
 36.71      0.27     0.11    27239     4.04     4.04  SortedList_insert_mutex
  6.67      0.29     0.02      183   109.41   109.41  SortedList_length
  3.34      0.30     0.01                             worker
  0.00      0.30     0.00    54439     0.00     0.00  hash
  0.00      0.30     0.00    27569     0.00     0.00  new_element
  0.00      0.30     0.00    27355     0.00     0.00  SortedList_delete_mutex
  0.00      0.30     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 3.33% of 0.30 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.7    0.01    0.29                 worker [1]
                0.16    0.00   27068/27068       SortedList_lookup_mutex [2]
                0.11    0.00   27239/27239       SortedList_insert_mutex [3]
                0.02    0.00     174/183         SortedList_length [4]
                0.00    0.00   54439/54439       hash [6]
                0.00    0.00   27560/27569       new_element [7]
                0.00    0.00   27355/27355       SortedList_delete_mutex [8]
-----------------------------------------------
                0.16    0.00   27068/27068       worker [1]
[2]     53.3    0.16    0.00   27068         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.11    0.00   27239/27239       worker [1]
[3]     36.7    0.11    0.00   27239         SortedList_insert_mutex [3]
-----------------------------------------------
                0.00    0.00       9/183         main [5]
                0.02    0.00     174/183         worker [1]
[4]      6.7    0.02    0.00     183         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      0.3    0.00    0.00                 main [5]
                0.00    0.00       9/183         SortedList_length [4]
                0.00    0.00       9/27569       new_element [7]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   54439/54439       worker [1]
[6]      0.0    0.00    0.00   54439         hash [6]
-----------------------------------------------
                0.00    0.00       9/27569       main [5]
                0.00    0.00   27560/27569       worker [1]
[7]      0.0    0.00    0.00   27569         new_element [7]
-----------------------------------------------
                0.00    0.00   27355/27355       worker [1]
[8]      0.0    0.00    0.00   27355         SortedList_delete_mutex [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] SortedList_delete_mutex [2] SortedList_lookup_mutex [7] new_element
   [3] SortedList_insert_mutex [9] SortedList_mutex_init   [1] worker
   [4] SortedList_length       [6] hash
10 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 259723476 ns
per operation: 4329 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 60.78      0.17     0.17    26485     6.43     6.43  SortedList_lookup_mutex
 25.03      0.24     0.07    26512     2.64     2.64  SortedList_insert_mutex
  7.15      0.26     0.02      204    98.15    98.15  SortedList_length
  3.58      0.27     0.01    53150     0.19     0.19  hash
  3.58      0.28     0.01                             main
  0.00      0.28     0.00    26795     0.00     0.00  SortedList_delete_mutex
  0.00      0.28     0.00    26765     0.00     0.00  new_element
  0.00      0.28     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 3.57% of 0.28 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.1    0.00    0.27                 worker [1]
                0.17    0.00   26485/26485       SortedList_lookup_mutex [2]
                0.07    0.00   26512/26512       SortedList_insert_mutex [3]
                0.02    0.00     194/204         SortedList_length [4]
                0.01    0.00   53150/53150       hash [6]
                0.00    0.00   26795/26795       SortedList_delete_mutex [7]
                0.00    0.00   26755/26765       new_element [8]
-----------------------------------------------
                0.17    0.00   26485/26485       worker [1]
[2]     60.7    0.17    0.00   26485         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.07    0.00   26512/26512       worker [1]
[3]     25.0    0.07    0.00   26512         SortedList_insert_mutex [3]
-----------------------------------------------
                0.00    0.00      10/204         main [5]
                0.02    0.00     194/204         worker [1]
[4]      7.1    0.02    0.00     204         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      3.9    0.01    0.00                 main [5]
                0.00    0.00      10/204         SortedList_length [4]
                0.00    0.00      10/26765       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.01    0.00   53150/53150       worker [1]
[6]      3.6    0.01    0.00   53150         hash [6]
-----------------------------------------------
                0.00    0.00   26795/26795       worker [1]
[7]      0.0    0.00    0.00   26795         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00      10/26765       main [5]
                0.00    0.00   26755/26765       worker [1]
[8]      0.0    0.00    0.00   26765         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [2] SortedList_lookup_mutex [5] main
   [3] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [4] SortedList_length       [6] hash
20 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 121987705 ns
per operation: 2033 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 42.15      0.08     0.08    23185     3.45     3.45  SortedList_insert_mutex
 36.88      0.15     0.07    24066     2.91     2.91  SortedList_lookup_mutex
 10.54      0.17     0.02                             main
  5.27      0.18     0.01    47206     0.21     0.21  hash
  5.27      0.19     0.01      397    25.22    25.22  SortedList_length
  0.00      0.19     0.00    24571     0.00     0.00  SortedList_delete_mutex
  0.00      0.19     0.00    23453     0.00     0.00  new_element
  0.00      0.19     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 5.26% of 0.19 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     89.2    0.00    0.17                 worker [1]
                0.08    0.00   23185/23185       SortedList_insert_mutex [2]
                0.07    0.00   24066/24066       SortedList_lookup_mutex [3]
                0.01    0.00   47206/47206       hash [5]
                0.01    0.00     377/397         SortedList_length [6]
                0.00    0.00   24571/24571       SortedList_delete_mutex [7]
                0.00    0.00   23433/23453       new_element [8]
-----------------------------------------------
                0.08    0.00   23185/23185       worker [1]
[2]     42.1    0.08    0.00   23185         SortedList_insert_mutex [2]
-----------------------------------------------
                0.07    0.00   24066/24066       worker [1]
[3]     36.8    0.07    0.00   24066         SortedList_lookup_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]     10.8    0.02    0.00                 main [4]
                0.00    0.00      20/397         SortedList_length [6]
                0.00    0.00      20/23453       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.01    0.00   47206/47206       worker [1]
[5]      5.3    0.01    0.00   47206         hash [5]
-----------------------------------------------
                0.00    0.00      20/397         main [4]
                0.01    0.00     377/397         worker [1]
[6]      5.3    0.01    0.00     397         SortedList_length [6]
-----------------------------------------------
                0.00    0.00   24571/24571       worker [1]
[7]      0.0    0.00    0.00   24571         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00      20/23453       main [4]
                0.00    0.00   23433/23453       worker [1]
[8]      0.0    0.00    0.00   23453         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [3] SortedList_lookup_mutex [4] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [6] SortedList_length       [5] hash
30 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 75722741 ns
per operation: 1262 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 54.61      0.06     0.06    20462     2.94     2.94  SortedList_insert_mutex
 36.41      0.10     0.04    21759     1.84     1.84  SortedList_lookup_mutex
  9.10      0.11     0.01                             main
  0.00      0.11     0.00    42101     0.00     0.00  hash
  0.00      0.11     0.00    22206     0.00     0.00  SortedList_delete_mutex
  0.00      0.11     0.00    20514     0.00     0.00  new_element
  0.00      0.11     0.00      556     0.00     0.00  SortedList_length
  0.00      0.11     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 9.08% of 0.11 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     90.9    0.00    0.10                 worker [1]
                0.06    0.00   20462/20462       SortedList_insert_mutex [2]
                0.04    0.00   21759/21759       SortedList_lookup_mutex [3]
                0.00    0.00   42101/42101       hash [5]
                0.00    0.00   22206/22206       SortedList_delete_mutex [6]
                0.00    0.00   20484/20514       new_element [7]
                0.00    0.00     526/556         SortedList_length [8]
-----------------------------------------------
                0.06    0.00   20462/20462       worker [1]
[2]     54.5    0.06    0.00   20462         SortedList_insert_mutex [2]
-----------------------------------------------
                0.04    0.00   21759/21759       worker [1]
[3]     36.4    0.04    0.00   21759         SortedList_lookup_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      9.1    0.01    0.00                 main [4]
                0.00    0.00      30/20514       new_element [7]
                0.00    0.00      30/556         SortedList_length [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   42101/42101       worker [1]
[5]      0.0    0.00    0.00   42101         hash [5]
-----------------------------------------------
                0.00    0.00   22206/22206       worker [1]
[6]      0.0    0.00    0.00   22206         SortedList_delete_mutex [6]
-----------------------------------------------
                0.00    0.00      30/20514       main [4]
                0.00    0.00   20484/20514       worker [1]
[7]      0.0    0.00    0.00   20514         new_element [7]
-----------------------------------------------
                0.00    0.00      30/556         main [4]
                0.00    0.00     526/556         worker [1]
[8]      0.0    0.00    0.00     556         SortedList_length [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] SortedList_delete_mutex [3] SortedList_lookup_mutex [4] main
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [7] new_element
   [8] SortedList_length       [5] hash
40 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 59042358 ns
per operation: 984 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 40.05      0.06     0.06    18221     3.30     3.30  SortedList_insert_mutex
 33.37      0.11     0.05    19504     2.57     2.57  SortedList_lookup_mutex
 13.35      0.13     0.02                             main
  6.67      0.14     0.01    37576     0.27     0.27  hash
  6.67      0.15     0.01                             SortedList_length_tas
  0.00      0.15     0.00    19993     0.00     0.00  SortedList_delete_mutex
  0.00      0.15     0.00    18304     0.00     0.00  new_element
  0.00      0.15     0.00      712     0.00     0.00  SortedList_length
  0.00      0.15     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 6.66% of 0.15 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     80.0    0.00    0.12                 worker [1]
                0.06    0.00   18221/18221       SortedList_insert_mutex [2]
                0.05    0.00   19504/19504       SortedList_lookup_mutex [3]
                0.01    0.00   37576/37576       hash [5]
                0.00    0.00   19993/19993       SortedList_delete_mutex [7]
                0.00    0.00   18264/18304       new_element [8]
                0.00    0.00     672/712         SortedList_length [9]
-----------------------------------------------
                0.06    0.00   18221/18221       worker [1]
[2]     40.0    0.06    0.00   18221         SortedList_insert_mutex [2]
-----------------------------------------------
                0.05    0.00   19504/19504       worker [1]
[3]     33.3    0.05    0.00   19504         SortedList_lookup_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]     13.3    0.02    0.00                 main [4]
                0.00    0.00      40/18304       new_element [8]
                0.00    0.00      40/712         SortedList_length [9]
                0.00    0.00       1/1           SortedList_mutex_init [10]
-----------------------------------------------
                0.01    0.00   37576/37576       worker [1]
[5]      6.7    0.01    0.00   37576         hash [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      6.7    0.01    0.00                 SortedList_length_tas [6]
-----------------------------------------------
                0.00    0.00   19993/19993       worker [1]
[7]      0.0    0.00    0.00   19993         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00      40/18304       main [4]
                0.00    0.00   18264/18304       worker [1]
[8]      0.0    0.00    0.00   18304         new_element [8]
-----------------------------------------------
                0.00    0.00      40/712         main [4]
                0.00    0.00     672/712         worker [1]
[9]      0.0    0.00    0.00     712         SortedList_length [9]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[10]     0.0    0.00    0.00       1         SortedList_mutex_init [10]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [6] SortedList_length_tas   [5] hash
   [2] SortedList_insert_mutex [3] SortedList_lookup_mutex [4] main
   [9] SortedList_length      [10] SortedList_mutex_init   [8] new_element
50 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 49800840 ns
per operation: 830 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 66.74      0.04     0.04    18383     2.18     2.18  SortedList_lookup_mutex
 33.37      0.06     0.02                             main
  0.00      0.06     0.00    34720     0.00     0.00  hash
  0.00      0.06     0.00    18935     0.00     0.00  SortedList_delete_mutex
  0.00      0.06     0.00    16514     0.00     0.00  new_element
  0.00      0.06     0.00    16476     0.00     0.00  SortedList_insert_mutex
  0.00      0.06     0.00      852     0.00     0.00  SortedList_length
  0.00      0.06     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 16.65% of 0.06 seconds

index % time    self  children    called     name
                0.04    0.00   18383/18383       worker [2]
[1]     66.7    0.04    0.00   18383         SortedList_lookup_mutex [1]
-----------------------------------------------
                                                 <spontaneous>
[2]     66.7    0.00    0.04                 worker [2]
                0.04    0.00   18383/18383       SortedList_lookup_mutex [1]
                0.00    0.00   34720/34720       hash [4]
                0.00    0.00   18935/18935       SortedList_delete_mutex [5]
                0.00    0.00   16476/16476       SortedList_insert_mutex [7]
                0.00    0.00   16464/16514       new_element [6]
                0.00    0.00     802/852         SortedList_length [8]
-----------------------------------------------
                                                 <spontaneous>
[3]     33.3    0.02    0.00                 main [3]
                0.00    0.00      50/16514       new_element [6]
                0.00    0.00      50/852         SortedList_length [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   34720/34720       worker [2]
[4]      0.0    0.00    0.00   34720         hash [4]
-----------------------------------------------
                0.00    0.00   18935/18935       worker [2]
[5]      0.0    0.00    0.00   18935         SortedList_delete_mutex [5]
-----------------------------------------------
                0.00    0.00      50/16514       main [3]
                0.00    0.00   16464/16514       worker [2]
[6]      0.0    0.00    0.00   16514         new_element [6]
-----------------------------------------------
                0.00    0.00   16476/16476       worker [2]
[7]      0.0    0.00    0.00   16476         SortedList_insert_mutex [7]
-----------------------------------------------
                0.00    0.00      50/852         main [3]
                0.00    0.00     802/852         worker [2]
[8]      0.0    0.00    0.00     852         SortedList_length [8]
-----------------------------------------------
                0.00    0.00       1/1           main [3]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [5] SortedList_delete_mutex [1] SortedList_lookup_mutex [3] main
   [7] SortedList_insert_mutex [9] SortedList_mutex_init   [6] new_element
   [8] SortedList_length       [4] hash
60 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 44568147 ns
per operation: 743 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.06      0.07     0.07    16035     4.37     4.37  SortedList_lookup_mutex
 21.45      0.10     0.03    30560     0.98     0.98  hash
 14.30      0.12     0.02      988    20.27    20.27  SortedList_length
  7.15      0.13     0.01    14653     0.68     0.68  SortedList_insert_mutex
  7.15      0.14     0.01                             main
  0.00      0.14     0.00    16704     0.00     0.00  SortedList_delete_mutex
  0.00      0.14     0.00    14744     0.00     0.00  new_element
  0.00      0.14     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 7.13% of 0.14 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     92.0    0.00    0.13                 worker [1]
                0.07    0.00   16035/16035       SortedList_lookup_mutex [2]
                0.03    0.00   30560/30560       hash [3]
                0.02    0.00     928/988         SortedList_length [4]
                0.01    0.00   14653/14653       SortedList_insert_mutex [6]
                0.00    0.00   16704/16704       SortedList_delete_mutex [7]
                0.00    0.00   14684/14744       new_element [8]
-----------------------------------------------
                0.07    0.00   16035/16035       worker [1]
[2]     50.0    0.07    0.00   16035         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.03    0.00   30560/30560       worker [1]
[3]     21.4    0.03    0.00   30560         hash [3]
-----------------------------------------------
                0.00    0.00      60/988         main [5]
                0.02    0.00     928/988         worker [1]
[4]     14.3    0.02    0.00     988         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      8.0    0.01    0.00                 main [5]
                0.00    0.00      60/988         SortedList_length [4]
                0.00    0.00      60/14744       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.01    0.00   14653/14653       worker [1]
[6]      7.1    0.01    0.00   14653         SortedList_insert_mutex [6]
-----------------------------------------------
                0.00    0.00   16704/16704       worker [1]
[7]      0.0    0.00    0.00   16704         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00      60/14744       main [5]
                0.00    0.00   14684/14744       worker [1]
[8]      0.0    0.00    0.00   14744         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [2] SortedList_lookup_mutex [5] main
   [6] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [4] SortedList_length       [3] hash
70 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 41966063 ns
per operation: 699 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.06      0.03     0.03    15518     1.94     1.94  SortedList_lookup_mutex
 33.37      0.05     0.02    28914     0.69     0.69  hash
 16.69      0.06     0.01                             worker
  0.00      0.06     0.00    16142     0.00     0.00  SortedList_delete_mutex
  0.00      0.06     0.00    13666     0.00     0.00  new_element
  0.00      0.06     0.00    13399     0.00     0.00  SortedList_insert_mutex
  0.00      0.06     0.00     1110     0.00     0.00  SortedList_length
  0.00      0.06     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 16.65% of 0.06 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.01    0.05                 worker [1]
                0.03    0.00   15518/15518       SortedList_lookup_mutex [2]
                0.02    0.00   28914/28914       hash [3]
                0.00    0.00   16142/16142       SortedList_delete_mutex [4]
                0.00    0.00   13596/13666       new_element [5]
                0.00    0.00   13399/13399       SortedList_insert_mutex [6]
                0.00    0.00    1040/1110        SortedList_length [7]
-----------------------------------------------
                0.03    0.00   15518/15518       worker [1]
[2]     50.0    0.03    0.00   15518         SortedList_lookup_mutex [2]
-----------------------------------------------
                0.02    0.00   28914/28914       worker [1]
[3]     33.3    0.02    0.00   28914         hash [3]
-----------------------------------------------
                0.00    0.00   16142/16142       worker [1]
[4]      0.0    0.00    0.00   16142         SortedList_delete_mutex [4]
-----------------------------------------------
                0.00    0.00      70/13666       main [25]
                0.00    0.00   13596/13666       worker [1]
[5]      0.0    0.00    0.00   13666         new_element [5]
-----------------------------------------------
                0.00    0.00   13399/13399       worker [1]
[6]      0.0    0.00    0.00   13399         SortedList_insert_mutex [6]
-----------------------------------------------
                0.00    0.00      70/1110        main [25]
                0.00    0.00    1040/1110        worker [1]
[7]      0.0    0.00    0.00    1110         SortedList_length [7]
-----------------------------------------------
                0.00    0.00       1/1           main [25]
[8]      0.0    0.00    0.00       1         SortedList_mutex_init [8]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [4] SortedList_delete_mutex [2] SortedList_lookup_mutex [5] new_element
   [6] SortedList_insert_mutex [8] SortedList_mutex_init   [1] worker
   [7] SortedList_length       [3] hash
80 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 37965699 ns
per operation: 633 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 41.71      0.05     0.05    12019     4.16     4.16  SortedList_insert_mutex
 16.69      0.07     0.02    25412     0.79     0.79  hash
 16.69      0.09     0.02    13524     1.48     1.48  SortedList_lookup_mutex
 16.69      0.11     0.02                             worker
  8.34      0.12     0.01     1131     8.85     8.85  SortedList_length
  0.00      0.12     0.00    14151     0.00     0.00  SortedList_delete_mutex
  0.00      0.12     0.00    12074     0.00     0.00  new_element
  0.00      0.12     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 8.32% of 0.12 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.4    0.02    0.10                 worker [1]
                0.05    0.00   12019/12019       SortedList_insert_mutex [2]
                0.02    0.00   25412/25412       hash [3]
                0.02    0.00   13524/13524       SortedList_lookup_mutex [4]
                0.01    0.00    1051/1131        SortedList_length [5]
                0.00    0.00   14151/14151       SortedList_delete_mutex [7]
                0.00    0.00   11994/12074       new_element [8]
-----------------------------------------------
                0.05    0.00   12019/12019       worker [1]
[2]     41.7    0.05    0.00   12019         SortedList_insert_mutex [2]
-----------------------------------------------
                0.02    0.00   25412/25412       worker [1]
[3]     16.7    0.02    0.00   25412         hash [3]
-----------------------------------------------
                0.02    0.00   13524/13524       worker [1]
[4]     16.7    0.02    0.00   13524         SortedList_lookup_mutex [4]
-----------------------------------------------
                0.00    0.00      80/1131        main [6]
                0.01    0.00    1051/1131        worker [1]
[5]      8.3    0.01    0.00    1131         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      0.6    0.00    0.00                 main [6]
                0.00    0.00      80/1131        SortedList_length [5]
                0.00    0.00      80/12074       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   14151/14151       worker [1]
[7]      0.0    0.00    0.00   14151         SortedList_delete_mutex [7]
-----------------------------------------------
                0.00    0.00      80/12074       main [6]
                0.00    0.00   11994/12074       worker [1]
[8]      0.0    0.00    0.00   12074         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] SortedList_delete_mutex [4] SortedList_lookup_mutex [8] new_element
   [2] SortedList_insert_mutex [9] SortedList_mutex_init   [1] worker
   [5] SortedList_length       [3] hash
90 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 35821764 ns
per operation: 597 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.06      0.02     0.02    25174     0.80     0.80  hash
 50.06      0.04     0.02     1279    15.66    15.66  SortedList_length
  0.00      0.04     0.00    13814     0.00     0.00  SortedList_delete_mutex
  0.00      0.04     0.00    13320     0.00     0.00  SortedList_lookup_mutex
  0.00      0.04     0.00    11849     0.00     0.00  new_element
  0.00      0.04     0.00    11563     0.00     0.00  SortedList_insert_mutex
  0.00      0.04     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 24.97% of 0.04 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.5    0.00    0.04                 worker [1]
                0.02    0.00   25174/25174       hash [2]
                0.02    0.00    1189/1279        SortedList_length [3]
                0.00    0.00   13814/13814       SortedList_delete_mutex [5]
                0.00    0.00   13320/13320       SortedList_lookup_mutex [6]
                0.00    0.00   11759/11849       new_element [7]
                0.00    0.00   11563/11563       SortedList_insert_mutex [8]
-----------------------------------------------
                0.02    0.00   25174/25174       worker [1]
[2]     50.0    0.02    0.00   25174         hash [2]
-----------------------------------------------
                0.00    0.00      90/1279        main [4]
                0.02    0.00    1189/1279        worker [1]
[3]     50.0    0.02    0.00    1279         SortedList_length [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      3.5    0.00    0.00                 main [4]
                0.00    0.00      90/1279        SortedList_length [3]
                0.00    0.00      90/11849       new_element [7]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.00    0.00   13814/13814       worker [1]
[5]      0.0    0.00    0.00   13814         SortedList_delete_mutex [5]
-----------------------------------------------
                0.00    0.00   13320/13320       worker [1]
[6]      0.0    0.00    0.00   13320         SortedList_lookup_mutex [6]
-----------------------------------------------
                0.00    0.00      90/11849       main [4]
                0.00    0.00   11759/11849       worker [1]
[7]      0.0    0.00    0.00   11849         new_element [7]
-----------------------------------------------
                0.00    0.00   11563/11563       worker [1]
[8]      0.0    0.00    0.00   11563         SortedList_insert_mutex [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [5] SortedList_delete_mutex [6] SortedList_lookup_mutex [7] new_element
   [8] SortedList_insert_mutex [9] SortedList_mutex_init
   [3] SortedList_length       [2] hash
100 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 34362856 ns
per operation: 573 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 25.03      0.02     0.02    22072     0.91     0.91  hash
 25.03      0.04     0.02     9994     2.00     2.00  SortedList_insert_mutex
 12.51      0.05     0.01    12803     0.78     0.78  SortedList_delete_mutex
 12.51      0.06     0.01    12067     0.83     0.83  SortedList_lookup_mutex
 12.51      0.07     0.01     1381     7.25     7.25  SortedList_length
 12.51      0.08     0.01                             main
  0.00      0.08     0.00    10039     0.00     0.00  new_element
  0.00      0.08     0.00        1     0.00     0.00  SortedList_mutex_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 12.49% of 0.08 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     86.6    0.00    0.07                 worker [1]
                0.02    0.00   22072/22072       hash [2]
                0.02    0.00    9994/9994        SortedList_insert_mutex [3]
                0.01    0.00   12803/12803       SortedList_delete_mutex [5]
                0.01    0.00   12067/12067       SortedList_lookup_mutex [6]
                0.01    0.00    1281/1381        SortedList_length [7]
                0.00    0.00    9939/10039       new_element [8]
-----------------------------------------------
                0.02    0.00   22072/22072       worker [1]
[2]     25.0    0.02    0.00   22072         hash [2]
-----------------------------------------------
                0.02    0.00    9994/9994        worker [1]
[3]     25.0    0.02    0.00    9994         SortedList_insert_mutex [3]
-----------------------------------------------
                                                 <spontaneous>
[4]     13.4    0.01    0.00                 main [4]
                0.00    0.00     100/1381        SortedList_length [7]
                0.00    0.00     100/10039       new_element [8]
                0.00    0.00       1/1           SortedList_mutex_init [9]
-----------------------------------------------
                0.01    0.00   12803/12803       worker [1]
[5]     12.5    0.01    0.00   12803         SortedList_delete_mutex [5]
-----------------------------------------------
                0.01    0.00   12067/12067       worker [1]
[6]     12.5    0.01    0.00   12067         SortedList_lookup_mutex [6]
-----------------------------------------------
                0.00    0.00     100/1381        main [4]
                0.01    0.00    1281/1381        worker [1]
[7]     12.5    0.01    0.00    1381         SortedList_length [7]
-----------------------------------------------
                0.00    0.00     100/10039       main [4]
                0.00    0.00    9939/10039       worker [1]
[8]      0.0    0.00    0.00   10039         new_element [8]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[9]      0.0    0.00    0.00       1         SortedList_mutex_init [9]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [5] SortedList_delete_mutex [6] SortedList_lookup_mutex [4] main
   [3] SortedList_insert_mutex [9] SortedList_mutex_init   [8] new_element
   [7] SortedList_length       [2] hash
   
////////////////////////////////////////////////////////////////////
gprof profiling report, --sync=s
////////////////////////////////////////////////////////////////////

1 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 7317305048 ns
per operation: 121955 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 97.82     62.00    62.00    56400     1.10     1.10  lock_s
  1.12     62.71     0.71    28530     0.02     0.02  SortedList_lookup_tas
  1.07     63.39     0.68    27316     0.02     0.02  SortedList_insert_tas
  0.05     63.42     0.03    53012     0.00     0.00  hash
  0.03     63.44     0.02                             main
  0.02     63.45     0.01                             worker
  0.00     63.45     0.00    59946     0.00     0.00  unlock_s
  0.00     63.45     0.00    29984     0.00     0.00  SortedList_delete_tas
  0.00     63.45     0.00    29914     0.00     0.00  new_element
  0.00     63.45     0.00       21     0.00     0.00  SortedList_length
  0.00     63.45     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.02% of 63.45 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.01   63.42                 worker [1]
               62.00    0.00   56400/56400       lock_s [2]
                0.71    0.00   28530/28530       SortedList_lookup_tas [3]
                0.68    0.00   27316/27316       SortedList_insert_tas [4]
                0.03    0.00   53012/53012       hash [5]
                0.00    0.00   59946/59946       unlock_s [7]
                0.00    0.00   29984/29984       SortedList_delete_tas [8]
                0.00    0.00   29913/29914       new_element [9]
                0.00    0.00      20/21          SortedList_length [10]
-----------------------------------------------
               62.00    0.00   56400/56400       worker [1]
[2]     97.7   62.00    0.00   56400         lock_s [2]
-----------------------------------------------
                0.71    0.00   28530/28530       worker [1]
[3]      1.1    0.71    0.00   28530         SortedList_lookup_tas [3]
-----------------------------------------------
                0.68    0.00   27316/27316       worker [1]
[4]      1.1    0.68    0.00   27316         SortedList_insert_tas [4]
-----------------------------------------------
                0.03    0.00   53012/53012       worker [1]
[5]      0.0    0.03    0.00   53012         hash [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      0.0    0.02    0.00                 main [6]
                0.00    0.00       1/29914       new_element [9]
                0.00    0.00       1/1           SortedList_tas_init [11]
                0.00    0.00       1/21          SortedList_length [10]
-----------------------------------------------
                0.00    0.00   59946/59946       worker [1]
[7]      0.0    0.00    0.00   59946         unlock_s [7]
-----------------------------------------------
                0.00    0.00   29984/29984       worker [1]
[8]      0.0    0.00    0.00   29984         SortedList_delete_tas [8]
-----------------------------------------------
                0.00    0.00       1/29914       main [6]
                0.00    0.00   29913/29914       worker [1]
[9]      0.0    0.00    0.00   29914         new_element [9]
-----------------------------------------------
                0.00    0.00       1/21          main [6]
                0.00    0.00      20/21          worker [1]
[10]     0.0    0.00    0.00      21         SortedList_length [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] SortedList_delete_tas  [11] SortedList_tas_init     [9] new_element
   [4] SortedList_insert_tas   [5] hash                    [7] unlock_s
  [10] SortedList_length       [2] lock_s                  [1] worker
   [3] SortedList_lookup_tas   [6] main
2 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 2847846699 ns
per operation: 47464 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 95.61     21.46    21.46    56217   381.82   381.82  lock_s
  2.45     22.02     0.55    26303    20.93    20.93  SortedList_insert_tas
  1.83     22.43     0.41    27783    14.77    14.77  SortedList_lookup_tas
  0.18     22.47     0.04    54738     0.73     0.73  hash
  0.04     22.48     0.01       41   244.18   244.18  SortedList_length
  0.00     22.48     0.00    59125     0.00     0.00  unlock_s
  0.00     22.48     0.00    29683     0.00     0.00  SortedList_delete_tas
  0.00     22.48     0.00    29197     0.00     0.00  new_element
  0.00     22.48     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.04% of 22.48 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00   22.48                 worker [1]
               21.46    0.00   56217/56217       lock_s [2]
                0.55    0.00   26303/26303       SortedList_insert_tas [3]
                0.41    0.00   27783/27783       SortedList_lookup_tas [4]
                0.04    0.00   54738/54738       hash [5]
                0.01    0.00      39/41          SortedList_length [6]
                0.00    0.00   59125/59125       unlock_s [8]
                0.00    0.00   29683/29683       SortedList_delete_tas [9]
                0.00    0.00   29195/29197       new_element [10]
-----------------------------------------------
               21.46    0.00   56217/56217       worker [1]
[2]     95.5   21.46    0.00   56217         lock_s [2]
-----------------------------------------------
                0.55    0.00   26303/26303       worker [1]
[3]      2.4    0.55    0.00   26303         SortedList_insert_tas [3]
-----------------------------------------------
                0.41    0.00   27783/27783       worker [1]
[4]      1.8    0.41    0.00   27783         SortedList_lookup_tas [4]
-----------------------------------------------
                0.04    0.00   54738/54738       worker [1]
[5]      0.2    0.04    0.00   54738         hash [5]
-----------------------------------------------
                0.00    0.00       2/41          main [7]
                0.01    0.00      39/41          worker [1]
[6]      0.0    0.01    0.00      41         SortedList_length [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      0.0    0.00    0.00                 main [7]
                0.00    0.00       2/41          SortedList_length [6]
                0.00    0.00       2/29197       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   59125/59125       worker [1]
[8]      0.0    0.00    0.00   59125         unlock_s [8]
-----------------------------------------------
                0.00    0.00   29683/29683       worker [1]
[9]      0.0    0.00    0.00   29683         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00       2/29197       main [7]
                0.00    0.00   29195/29197       worker [1]
[10]     0.0    0.00    0.00   29197         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas   [4] SortedList_lookup_tas   [2] lock_s
   [3] SortedList_insert_tas  [11] SortedList_tas_init    [10] new_element
   [6] SortedList_length       [5] hash                    [8] unlock_s
3 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 1398520898 ns
per operation: 23309 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 79.76      5.85     5.85    52591   111.17   111.17  lock_s
  9.56      6.55     0.70    25511    27.47    27.47  SortedList_insert_tas
  9.29      7.23     0.68    27276    24.96    24.96  SortedList_lookup_tas
  0.82      7.29     0.06       63   953.47   953.47  SortedList_length
  0.55      7.33     0.04    53012     0.76     0.76  hash
  0.14      7.34     0.01                             main
  0.00      7.34     0.00    57880     0.00     0.00  unlock_s
  0.00      7.34     0.00    29115     0.00     0.00  SortedList_delete_tas
  0.00      7.34     0.00    28690     0.00     0.00  new_element
  0.00      7.34     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.14% of 7.34 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.8    0.00    7.33                 worker [1]
                5.85    0.00   52591/52591       lock_s [2]
                0.70    0.00   25511/25511       SortedList_insert_tas [3]
                0.68    0.00   27276/27276       SortedList_lookup_tas [4]
                0.06    0.00      60/63          SortedList_length [5]
                0.04    0.00   53012/53012       hash [6]
                0.00    0.00   57880/57880       unlock_s [8]
                0.00    0.00   29115/29115       SortedList_delete_tas [9]
                0.00    0.00   28687/28690       new_element [10]
-----------------------------------------------
                5.85    0.00   52591/52591       worker [1]
[2]     79.7    5.85    0.00   52591         lock_s [2]
-----------------------------------------------
                0.70    0.00   25511/25511       worker [1]
[3]      9.5    0.70    0.00   25511         SortedList_insert_tas [3]
-----------------------------------------------
                0.68    0.00   27276/27276       worker [1]
[4]      9.3    0.68    0.00   27276         SortedList_lookup_tas [4]
-----------------------------------------------
                0.00    0.00       3/63          main [7]
                0.06    0.00      60/63          worker [1]
[5]      0.8    0.06    0.00      63         SortedList_length [5]
-----------------------------------------------
                0.04    0.00   53012/53012       worker [1]
[6]      0.5    0.04    0.00   53012         hash [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      0.2    0.01    0.00                 main [7]
                0.00    0.00       3/63          SortedList_length [5]
                0.00    0.00       3/28690       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   57880/57880       worker [1]
[8]      0.0    0.00    0.00   57880         unlock_s [8]
-----------------------------------------------
                0.00    0.00   29115/29115       worker [1]
[9]      0.0    0.00    0.00   29115         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00       3/28690       main [7]
                0.00    0.00   28687/28690       worker [1]
[10]     0.0    0.00    0.00   28690         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [3] SortedList_insert_tas   [6] hash                    [8] unlock_s
   [5] SortedList_length       [2] lock_s
   [4] SortedList_lookup_tas   [7] main
4 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 962025849 ns
per operation: 16034 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 84.57      4.47     4.47    53066    84.14    84.14  lock_s
  8.53      4.92     0.45    25302    17.81    17.81  SortedList_insert_tas
  5.88      5.23     0.31    26221    11.84    11.84  SortedList_lookup_tas
  0.76      5.27     0.04       81   494.39   494.39  SortedList_length
  0.19      5.28     0.01                             main
  0.19      5.29     0.01                             worker
  0.00      5.29     0.00    56714     0.00     0.00  unlock_s
  0.00      5.29     0.00    53239     0.00     0.00  hash
  0.00      5.29     0.00    28593     0.00     0.00  SortedList_delete_tas
  0.00      5.29     0.00    27943     0.00     0.00  new_element
  0.00      5.29     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.19% of 5.29 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.8    0.01    5.26                 worker [1]
                4.47    0.00   53066/53066       lock_s [2]
                0.45    0.00   25302/25302       SortedList_insert_tas [3]
                0.31    0.00   26221/26221       SortedList_lookup_tas [4]
                0.04    0.00      77/81          SortedList_length [5]
                0.00    0.00   56714/56714       unlock_s [7]
                0.00    0.00   53239/53239       hash [8]
                0.00    0.00   28593/28593       SortedList_delete_tas [9]
                0.00    0.00   27939/27943       new_element [10]
-----------------------------------------------
                4.47    0.00   53066/53066       worker [1]
[2]     84.5    4.47    0.00   53066         lock_s [2]
-----------------------------------------------
                0.45    0.00   25302/25302       worker [1]
[3]      8.5    0.45    0.00   25302         SortedList_insert_tas [3]
-----------------------------------------------
                0.31    0.00   26221/26221       worker [1]
[4]      5.9    0.31    0.00   26221         SortedList_lookup_tas [4]
-----------------------------------------------
                0.00    0.00       4/81          main [6]
                0.04    0.00      77/81          worker [1]
[5]      0.8    0.04    0.00      81         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      0.2    0.01    0.00                 main [6]
                0.00    0.00       4/81          SortedList_length [5]
                0.00    0.00       4/27943       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   56714/56714       worker [1]
[7]      0.0    0.00    0.00   56714         unlock_s [7]
-----------------------------------------------
                0.00    0.00   53239/53239       worker [1]
[8]      0.0    0.00    0.00   53239         hash [8]
-----------------------------------------------
                0.00    0.00   28593/28593       worker [1]
[9]      0.0    0.00    0.00   28593         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00       4/27943       main [6]
                0.00    0.00   27939/27943       worker [1]
[10]     0.0    0.00    0.00   27943         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [3] SortedList_insert_tas   [8] hash                    [7] unlock_s
   [5] SortedList_length       [2] lock_s                  [1] worker
   [4] SortedList_lookup_tas   [6] main
5 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 627142428 ns
per operation: 10452 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 61.39      1.49     1.49    50032    29.82    29.82  lock_s
 18.54      1.94     0.45    25820    17.45    17.45  SortedList_lookup_tas
 17.30      2.36     0.42    24489    17.17    17.17  SortedList_insert_tas
  2.47      2.42     0.06      104   577.58   577.58  SortedList_length
  0.41      2.43     0.01                             main
  0.00      2.43     0.00    54988     0.00     0.00  unlock_s
  0.00      2.43     0.00    50848     0.00     0.00  hash
  0.00      2.43     0.00    27906     0.00     0.00  SortedList_delete_tas
  0.00      2.43     0.00    27020     0.00     0.00  new_element
  0.00      2.43     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.41% of 2.43 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.5    0.00    2.42                 worker [1]
                1.49    0.00   50032/50032       lock_s [2]
                0.45    0.00   25820/25820       SortedList_lookup_tas [3]
                0.42    0.00   24489/24489       SortedList_insert_tas [4]
                0.06    0.00      99/104         SortedList_length [5]
                0.00    0.00   54988/54988       unlock_s [7]
                0.00    0.00   50848/50848       hash [8]
                0.00    0.00   27906/27906       SortedList_delete_tas [9]
                0.00    0.00   27015/27020       new_element [10]
-----------------------------------------------
                1.49    0.00   50032/50032       worker [1]
[2]     61.3    1.49    0.00   50032         lock_s [2]
-----------------------------------------------
                0.45    0.00   25820/25820       worker [1]
[3]     18.5    0.45    0.00   25820         SortedList_lookup_tas [3]
-----------------------------------------------
                0.42    0.00   24489/24489       worker [1]
[4]     17.3    0.42    0.00   24489         SortedList_insert_tas [4]
-----------------------------------------------
                0.00    0.00       5/104         main [6]
                0.06    0.00      99/104         worker [1]
[5]      2.5    0.06    0.00     104         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      0.5    0.01    0.00                 main [6]
                0.00    0.00       5/104         SortedList_length [5]
                0.00    0.00       5/27020       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   54988/54988       worker [1]
[7]      0.0    0.00    0.00   54988         unlock_s [7]
-----------------------------------------------
                0.00    0.00   50848/50848       worker [1]
[8]      0.0    0.00    0.00   50848         hash [8]
-----------------------------------------------
                0.00    0.00   27906/27906       worker [1]
[9]      0.0    0.00    0.00   27906         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00       5/27020       main [6]
                0.00    0.00   27015/27020       worker [1]
[10]     0.0    0.00    0.00   27020         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [4] SortedList_insert_tas   [8] hash                    [7] unlock_s
   [5] SortedList_length       [2] lock_s
   [3] SortedList_lookup_tas   [6] main
6 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 520129692 ns
per operation: 8669 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 66.43      1.40     1.40    50657    27.67    27.67  lock_s
 15.18      1.72     0.32    23939    13.38    13.38  SortedList_insert_tas
 13.29      2.00     0.28    24969    11.23    11.23  SortedList_lookup_tas
  1.90      2.04     0.04      120   333.72   333.72  SortedList_length
  1.42      2.07     0.03    50461     0.60     0.60  hash
  0.95      2.09     0.02                             main
  0.47      2.10     0.01    27407     0.37     0.37  SortedList_delete_tas
  0.47      2.11     0.01                             worker
  0.00      2.11     0.00    54000     0.00     0.00  unlock_s
  0.00      2.11     0.00    26182     0.00     0.00  new_element
  0.00      2.11     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.47% of 2.11 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.0    0.01    2.08                 worker [1]
                1.40    0.00   50657/50657       lock_s [2]
                0.32    0.00   23939/23939       SortedList_insert_tas [3]
                0.28    0.00   24969/24969       SortedList_lookup_tas [4]
                0.04    0.00     114/120         SortedList_length [5]
                0.03    0.00   50461/50461       hash [6]
                0.01    0.00   27407/27407       SortedList_delete_tas [8]
                0.00    0.00   54000/54000       unlock_s [9]
                0.00    0.00   26176/26182       new_element [10]
-----------------------------------------------
                1.40    0.00   50657/50657       worker [1]
[2]     66.4    1.40    0.00   50657         lock_s [2]
-----------------------------------------------
                0.32    0.00   23939/23939       worker [1]
[3]     15.2    0.32    0.00   23939         SortedList_insert_tas [3]
-----------------------------------------------
                0.28    0.00   24969/24969       worker [1]
[4]     13.3    0.28    0.00   24969         SortedList_lookup_tas [4]
-----------------------------------------------
                0.00    0.00       6/120         main [7]
                0.04    0.00     114/120         worker [1]
[5]      1.9    0.04    0.00     120         SortedList_length [5]
-----------------------------------------------
                0.03    0.00   50461/50461       worker [1]
[6]      1.4    0.03    0.00   50461         hash [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      1.0    0.02    0.00                 main [7]
                0.00    0.00       6/120         SortedList_length [5]
                0.00    0.00       6/26182       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00   27407/27407       worker [1]
[8]      0.5    0.01    0.00   27407         SortedList_delete_tas [8]
-----------------------------------------------
                0.00    0.00   54000/54000       worker [1]
[9]      0.0    0.00    0.00   54000         unlock_s [9]
-----------------------------------------------
                0.00    0.00       6/26182       main [7]
                0.00    0.00   26176/26182       worker [1]
[10]     0.0    0.00    0.00   26182         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [3] SortedList_insert_tas   [6] hash                    [9] unlock_s
   [5] SortedList_length       [2] lock_s                  [1] worker
   [4] SortedList_lookup_tas   [7] main
7 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 374603519 ns
per operation: 6243 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 52.11      0.76     0.76    49106    15.49    15.49  lock_s
 22.63      1.09     0.33    23117    14.29    14.29  SortedList_insert_tas
 21.26      1.40     0.31    24432    12.70    12.70  SortedList_lookup_tas
  1.37      1.42     0.02    48626     0.41     0.41  hash
  1.37      1.44     0.02      134   149.42   149.42  SortedList_length
  0.69      1.45     0.01                             main
  0.69      1.46     0.01                             worker
  0.00      1.46     0.00    52274     0.00     0.00  unlock_s
  0.00      1.46     0.00    26685     0.00     0.00  SortedList_delete_tas
  0.00      1.46     0.00    25448     0.00     0.00  new_element
  0.00      1.46     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.68% of 1.46 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.2    0.01    1.44                 worker [1]
                0.76    0.00   49106/49106       lock_s [2]
                0.33    0.00   23117/23117       SortedList_insert_tas [3]
                0.31    0.00   24432/24432       SortedList_lookup_tas [4]
                0.02    0.00   48626/48626       hash [5]
                0.02    0.00     127/134         SortedList_length [6]
                0.00    0.00   52274/52274       unlock_s [8]
                0.00    0.00   26685/26685       SortedList_delete_tas [9]
                0.00    0.00   25441/25448       new_element [10]
-----------------------------------------------
                0.76    0.00   49106/49106       worker [1]
[2]     52.1    0.76    0.00   49106         lock_s [2]
-----------------------------------------------
                0.33    0.00   23117/23117       worker [1]
[3]     22.6    0.33    0.00   23117         SortedList_insert_tas [3]
-----------------------------------------------
                0.31    0.00   24432/24432       worker [1]
[4]     21.2    0.31    0.00   24432         SortedList_lookup_tas [4]
-----------------------------------------------
                0.02    0.00   48626/48626       worker [1]
[5]      1.4    0.02    0.00   48626         hash [5]
-----------------------------------------------
                0.00    0.00       7/134         main [7]
                0.02    0.00     127/134         worker [1]
[6]      1.4    0.02    0.00     134         SortedList_length [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      0.8    0.01    0.00                 main [7]
                0.00    0.00       7/134         SortedList_length [6]
                0.00    0.00       7/25448       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   52274/52274       worker [1]
[8]      0.0    0.00    0.00   52274         unlock_s [8]
-----------------------------------------------
                0.00    0.00   26685/26685       worker [1]
[9]      0.0    0.00    0.00   26685         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00       7/25448       main [7]
                0.00    0.00   25441/25448       worker [1]
[10]     0.0    0.00    0.00   25448         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [3] SortedList_insert_tas   [5] hash                    [8] unlock_s
   [6] SortedList_length       [2] lock_s                  [1] worker
   [4] SortedList_lookup_tas   [7] main
8 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 309841681 ns
per operation: 5164 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 39.83      0.37     0.37    47397     7.82     7.82  lock_s
 30.14      0.65     0.28    22303    12.57    12.57  SortedList_insert_tas
 21.53      0.85     0.20    23595     8.49     8.49  SortedList_lookup_tas
  6.46      0.91     0.06      157   382.60   382.60  SortedList_length
  2.15      0.93     0.02    47708     0.42     0.42  hash
  0.00      0.93     0.00    50718     0.00     0.00  unlock_s
  0.00      0.93     0.00    25974     0.00     0.00  SortedList_delete_tas
  0.00      0.93     0.00    24572     0.00     0.00  new_element
  0.00      0.93     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.07% of 0.93 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.7    0.00    0.93                 worker [1]
                0.37    0.00   47397/47397       lock_s [2]
                0.28    0.00   22303/22303       SortedList_insert_tas [3]
                0.20    0.00   23595/23595       SortedList_lookup_tas [4]
                0.06    0.00     149/157         SortedList_length [5]
                0.02    0.00   47708/47708       hash [6]
                0.00    0.00   50718/50718       unlock_s [8]
                0.00    0.00   25974/25974       SortedList_delete_tas [9]
                0.00    0.00   24564/24572       new_element [10]
-----------------------------------------------
                0.37    0.00   47397/47397       worker [1]
[2]     39.8    0.37    0.00   47397         lock_s [2]
-----------------------------------------------
                0.28    0.00   22303/22303       worker [1]
[3]     30.1    0.28    0.00   22303         SortedList_insert_tas [3]
-----------------------------------------------
                0.20    0.00   23595/23595       worker [1]
[4]     21.5    0.20    0.00   23595         SortedList_lookup_tas [4]
-----------------------------------------------
                0.00    0.00       8/157         main [7]
                0.06    0.00     149/157         worker [1]
[5]      6.5    0.06    0.00     157         SortedList_length [5]
-----------------------------------------------
                0.02    0.00   47708/47708       worker [1]
[6]      2.2    0.02    0.00   47708         hash [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      0.3    0.00    0.00                 main [7]
                0.00    0.00       8/157         SortedList_length [5]
                0.00    0.00       8/24572       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   50718/50718       worker [1]
[8]      0.0    0.00    0.00   50718         unlock_s [8]
-----------------------------------------------
                0.00    0.00   25974/25974       worker [1]
[9]      0.0    0.00    0.00   25974         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00       8/24572       main [7]
                0.00    0.00   24564/24572       worker [1]
[10]     0.0    0.00    0.00   24572         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas   [4] SortedList_lookup_tas   [2] lock_s
   [3] SortedList_insert_tas  [11] SortedList_tas_init    [10] new_element
   [5] SortedList_length       [6] hash                    [8] unlock_s
9 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 260902565 ns
per operation: 4348 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 40.60      0.37     0.37    45303     8.07     8.07  lock_s
 27.81      0.62     0.25    22305    11.22    11.22  SortedList_lookup_tas
 18.91      0.79     0.17    21411     7.95     7.95  SortedList_insert_tas
  6.67      0.85     0.06      174   345.22   345.22  SortedList_length
  3.34      0.88     0.03    45717     0.66     0.66  hash
  1.11      0.89     0.01    24785     0.40     0.40  SortedList_delete_tas
  1.11      0.90     0.01                             main
  0.56      0.90     0.01    48679     0.10     0.10  unlock_s
  0.00      0.90     0.00    23566     0.00     0.00  new_element
  0.00      0.90     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.11% of 0.90 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     98.5    0.00    0.89                 worker [1]
                0.37    0.00   45303/45303       lock_s [2]
                0.25    0.00   22305/22305       SortedList_lookup_tas [3]
                0.17    0.00   21411/21411       SortedList_insert_tas [4]
                0.06    0.00     165/174         SortedList_length [5]
                0.03    0.00   45717/45717       hash [6]
                0.01    0.00   24785/24785       SortedList_delete_tas [8]
                0.01    0.00   48679/48679       unlock_s [9]
                0.00    0.00   23557/23566       new_element [10]
-----------------------------------------------
                0.37    0.00   45303/45303       worker [1]
[2]     40.6    0.37    0.00   45303         lock_s [2]
-----------------------------------------------
                0.25    0.00   22305/22305       worker [1]
[3]     27.8    0.25    0.00   22305         SortedList_lookup_tas [3]
-----------------------------------------------
                0.17    0.00   21411/21411       worker [1]
[4]     18.9    0.17    0.00   21411         SortedList_insert_tas [4]
-----------------------------------------------
                0.00    0.00       9/174         main [7]
                0.06    0.00     165/174         worker [1]
[5]      6.7    0.06    0.00     174         SortedList_length [5]
-----------------------------------------------
                0.03    0.00   45717/45717       worker [1]
[6]      3.3    0.03    0.00   45717         hash [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      1.5    0.01    0.00                 main [7]
                0.00    0.00       9/174         SortedList_length [5]
                0.00    0.00       9/23566       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00   24785/24785       worker [1]
[8]      1.1    0.01    0.00   24785         SortedList_delete_tas [8]
-----------------------------------------------
                0.01    0.00   48679/48679       worker [1]
[9]      0.6    0.01    0.00   48679         unlock_s [9]
-----------------------------------------------
                0.00    0.00       9/23566       main [7]
                0.00    0.00   23557/23566       worker [1]
[10]     0.0    0.00    0.00   23566         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [4] SortedList_insert_tas   [6] hash                    [9] unlock_s
   [5] SortedList_length       [2] lock_s
   [3] SortedList_lookup_tas   [7] main
10 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 238890326 ns
per operation: 3982 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 48.84      0.40     0.40    45322     8.84     8.84  lock_s
 24.42      0.60     0.20    21042     9.52     9.52  SortedList_insert_tas
 20.76      0.77     0.17    22081     7.71     7.71  SortedList_lookup_tas
  3.66      0.80     0.03      187   160.61   160.61  SortedList_length
  1.22      0.81     0.01    44596     0.22     0.22  hash
  1.22      0.82     0.01                             main
  0.00      0.82     0.00    47869     0.00     0.00  unlock_s
  0.00      0.82     0.00    24508     0.00     0.00  SortedList_delete_tas
  0.00      0.82     0.00    23190     0.00     0.00  new_element
  0.00      0.82     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.22% of 0.82 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     98.6    0.00    0.81                 worker [1]
                0.40    0.00   45322/45322       lock_s [2]
                0.20    0.00   21042/21042       SortedList_insert_tas [3]
                0.17    0.00   22081/22081       SortedList_lookup_tas [4]
                0.03    0.00     177/187         SortedList_length [5]
                0.01    0.00   44596/44596       hash [7]
                0.00    0.00   47869/47869       unlock_s [8]
                0.00    0.00   24508/24508       SortedList_delete_tas [9]
                0.00    0.00   23180/23190       new_element [10]
-----------------------------------------------
                0.40    0.00   45322/45322       worker [1]
[2]     48.8    0.40    0.00   45322         lock_s [2]
-----------------------------------------------
                0.20    0.00   21042/21042       worker [1]
[3]     24.4    0.20    0.00   21042         SortedList_insert_tas [3]
-----------------------------------------------
                0.17    0.00   22081/22081       worker [1]
[4]     20.7    0.17    0.00   22081         SortedList_lookup_tas [4]
-----------------------------------------------
                0.00    0.00      10/187         main [6]
                0.03    0.00     177/187         worker [1]
[5]      3.7    0.03    0.00     187         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      1.4    0.01    0.00                 main [6]
                0.00    0.00      10/187         SortedList_length [5]
                0.00    0.00      10/23190       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00   44596/44596       worker [1]
[7]      1.2    0.01    0.00   44596         hash [7]
-----------------------------------------------
                0.00    0.00   47869/47869       worker [1]
[8]      0.0    0.00    0.00   47869         unlock_s [8]
-----------------------------------------------
                0.00    0.00   24508/24508       worker [1]
[9]      0.0    0.00    0.00   24508         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00      10/23190       main [6]
                0.00    0.00   23180/23190       worker [1]
[10]     0.0    0.00    0.00   23190         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [3] SortedList_insert_tas   [7] hash                    [8] unlock_s
   [5] SortedList_length       [2] lock_s
   [4] SortedList_lookup_tas   [6] main
20 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 101153591 ns
per operation: 1686 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 43.80      0.14     0.14    37001     3.79     3.79  lock_s
 21.90      0.21     0.07    17692     3.96     3.96  SortedList_lookup_tas
 21.90      0.28     0.07    16182     4.33     4.33  SortedList_insert_tas
  9.39      0.31     0.03      343    87.56    87.56  SortedList_length
  3.13      0.32     0.01                             main
  0.00      0.32     0.00    37765     0.00     0.00  unlock_s
  0.00      0.32     0.00    35953     0.00     0.00  hash
  0.00      0.32     0.00    20092     0.00     0.00  SortedList_delete_tas
  0.00      0.32     0.00    17500     0.00     0.00  new_element
  0.00      0.32     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 3.12% of 0.32 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     96.3    0.00    0.31                 worker [1]
                0.14    0.00   37001/37001       lock_s [2]
                0.07    0.00   17692/17692       SortedList_lookup_tas [3]
                0.07    0.00   16182/16182       SortedList_insert_tas [4]
                0.03    0.00     323/343         SortedList_length [5]
                0.00    0.00   37765/37765       unlock_s [7]
                0.00    0.00   35953/35953       hash [8]
                0.00    0.00   20092/20092       SortedList_delete_tas [9]
                0.00    0.00   17480/17500       new_element [10]
-----------------------------------------------
                0.14    0.00   37001/37001       worker [1]
[2]     43.8    0.14    0.00   37001         lock_s [2]
-----------------------------------------------
                0.07    0.00   17692/17692       worker [1]
[3]     21.9    0.07    0.00   17692         SortedList_lookup_tas [3]
-----------------------------------------------
                0.07    0.00   16182/16182       worker [1]
[4]     21.9    0.07    0.00   16182         SortedList_insert_tas [4]
-----------------------------------------------
                0.00    0.00      20/343         main [6]
                0.03    0.00     323/343         worker [1]
[5]      9.4    0.03    0.00     343         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      3.7    0.01    0.00                 main [6]
                0.00    0.00      20/343         SortedList_length [5]
                0.00    0.00      20/17500       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   37765/37765       worker [1]
[7]      0.0    0.00    0.00   37765         unlock_s [7]
-----------------------------------------------
                0.00    0.00   35953/35953       worker [1]
[8]      0.0    0.00    0.00   35953         hash [8]
-----------------------------------------------
                0.00    0.00   20092/20092       worker [1]
[9]      0.0    0.00    0.00   20092         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00      20/17500       main [6]
                0.00    0.00   17480/17500       worker [1]
[10]     0.0    0.00    0.00   17500         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [4] SortedList_insert_tas   [8] hash                    [7] unlock_s
   [5] SortedList_length       [2] lock_s
   [3] SortedList_lookup_tas   [6] main
30 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 68401996 ns
per operation: 1140 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 31.62      0.06     0.06    29200     2.06     2.06  lock_s
 26.35      0.11     0.05    14059     3.56     3.56  SortedList_lookup_tas
 10.54      0.13     0.02    27868     0.72     0.72  hash
 10.54      0.15     0.02    12936     1.55     1.55  SortedList_insert_tas
 10.54      0.17     0.02      494    40.53    40.53  SortedList_length
 10.54      0.19     0.02                             main
  0.00      0.19     0.00    28986     0.00     0.00  unlock_s
  0.00      0.19     0.00    15364     0.00     0.00  SortedList_delete_tas
  0.00      0.19     0.00    13700     0.00     0.00  new_element
  0.00      0.19     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 5.26% of 0.19 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     88.8    0.00    0.17                 worker [1]
                0.06    0.00   29200/29200       lock_s [2]
                0.05    0.00   14059/14059       SortedList_lookup_tas [3]
                0.02    0.00   27868/27868       hash [5]
                0.02    0.00   12936/12936       SortedList_insert_tas [6]
                0.02    0.00     464/494         SortedList_length [7]
                0.00    0.00   28986/28986       unlock_s [8]
                0.00    0.00   15364/15364       SortedList_delete_tas [9]
                0.00    0.00   13670/13700       new_element [10]
-----------------------------------------------
                0.06    0.00   29200/29200       worker [1]
[2]     31.6    0.06    0.00   29200         lock_s [2]
-----------------------------------------------
                0.05    0.00   14059/14059       worker [1]
[3]     26.3    0.05    0.00   14059         SortedList_lookup_tas [3]
-----------------------------------------------
                                                 <spontaneous>
[4]     11.2    0.02    0.00                 main [4]
                0.00    0.00      30/494         SortedList_length [7]
                0.00    0.00      30/13700       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.02    0.00   27868/27868       worker [1]
[5]     10.5    0.02    0.00   27868         hash [5]
-----------------------------------------------
                0.02    0.00   12936/12936       worker [1]
[6]     10.5    0.02    0.00   12936         SortedList_insert_tas [6]
-----------------------------------------------
                0.00    0.00      30/494         main [4]
                0.02    0.00     464/494         worker [1]
[7]     10.5    0.02    0.00     494         SortedList_length [7]
-----------------------------------------------
                0.00    0.00   28986/28986       worker [1]
[8]      0.0    0.00    0.00   28986         unlock_s [8]
-----------------------------------------------
                0.00    0.00   15364/15364       worker [1]
[9]      0.0    0.00    0.00   15364         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00      30/13700       main [4]
                0.00    0.00   13670/13700       worker [1]
[10]     0.0    0.00    0.00   13700         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [6] SortedList_insert_tas   [5] hash                    [8] unlock_s
   [7] SortedList_length       [2] lock_s
   [3] SortedList_lookup_tas   [4] main
40 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 55523544 ns
per operation: 925 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 38.93      0.07     0.07    12410     5.65     5.65  SortedList_lookup_tas
 22.25      0.11     0.04    25390     1.58     1.58  lock_s
 16.69      0.14     0.03    24086     1.25     1.25  hash
 11.12      0.16     0.02      610    32.82    32.82  SortedList_length
  5.56      0.17     0.01    11104     0.90     0.90  SortedList_insert_tas
  5.56      0.18     0.01                             main
  0.00      0.18     0.00    24681     0.00     0.00  unlock_s
  0.00      0.18     0.00    13628     0.00     0.00  SortedList_delete_tas
  0.00      0.18     0.00    11322     0.00     0.00  new_element
  0.00      0.18     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 5.55% of 0.18 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     93.7    0.00    0.17                 worker [1]
                0.07    0.00   12410/12410       SortedList_lookup_tas [2]
                0.04    0.00   25390/25390       lock_s [3]
                0.03    0.00   24086/24086       hash [4]
                0.02    0.00     570/610         SortedList_length [5]
                0.01    0.00   11104/11104       SortedList_insert_tas [7]
                0.00    0.00   24681/24681       unlock_s [8]
                0.00    0.00   13628/13628       SortedList_delete_tas [9]
                0.00    0.00   11282/11322       new_element [10]
-----------------------------------------------
                0.07    0.00   12410/12410       worker [1]
[2]     38.9    0.07    0.00   12410         SortedList_lookup_tas [2]
-----------------------------------------------
                0.04    0.00   25390/25390       worker [1]
[3]     22.2    0.04    0.00   25390         lock_s [3]
-----------------------------------------------
                0.03    0.00   24086/24086       worker [1]
[4]     16.7    0.03    0.00   24086         hash [4]
-----------------------------------------------
                0.00    0.00      40/610         main [6]
                0.02    0.00     570/610         worker [1]
[5]     11.1    0.02    0.00     610         SortedList_length [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      6.3    0.01    0.00                 main [6]
                0.00    0.00      40/610         SortedList_length [5]
                0.00    0.00      40/11322       new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00   11104/11104       worker [1]
[7]      5.6    0.01    0.00   11104         SortedList_insert_tas [7]
-----------------------------------------------
                0.00    0.00   24681/24681       worker [1]
[8]      0.0    0.00    0.00   24681         unlock_s [8]
-----------------------------------------------
                0.00    0.00   13628/13628       worker [1]
[9]      0.0    0.00    0.00   13628         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00      40/11322       main [6]
                0.00    0.00   11282/11322       worker [1]
[10]     0.0    0.00    0.00   11322         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [7] SortedList_insert_tas   [4] hash                    [8] unlock_s
   [5] SortedList_length       [3] lock_s
   [2] SortedList_lookup_tas   [6] main
50 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 46267455 ns
per operation: 771 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 46.72      0.07     0.07    19291     3.63     3.63  lock_s
 20.02      0.10     0.03     9286     3.23     3.23  SortedList_insert_tas
 20.02      0.13     0.03      717    41.89    41.89  SortedList_length
  6.67      0.14     0.01    18336     0.55     0.55  hash
  6.67      0.15     0.01                             main
  0.00      0.15     0.00    18860     0.00     0.00  unlock_s
  0.00      0.15     0.00     9748     0.00     0.00  SortedList_delete_tas
  0.00      0.15     0.00     9289     0.00     0.00  new_element
  0.00      0.15     0.00     9247     0.00     0.00  SortedList_lookup_tas
  0.00      0.15     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 6.66% of 0.15 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     91.9    0.00    0.14                 worker [1]
                0.07    0.00   19291/19291       lock_s [2]
                0.03    0.00    9286/9286        SortedList_insert_tas [3]
                0.03    0.00     667/717         SortedList_length [4]
                0.01    0.00   18336/18336       hash [6]
                0.00    0.00   18860/18860       unlock_s [7]
                0.00    0.00    9748/9748        SortedList_delete_tas [8]
                0.00    0.00    9247/9247        SortedList_lookup_tas [10]
                0.00    0.00    9239/9289        new_element [9]
-----------------------------------------------
                0.07    0.00   19291/19291       worker [1]
[2]     46.7    0.07    0.00   19291         lock_s [2]
-----------------------------------------------
                0.03    0.00    9286/9286        worker [1]
[3]     20.0    0.03    0.00    9286         SortedList_insert_tas [3]
-----------------------------------------------
                0.00    0.00      50/717         main [5]
                0.03    0.00     667/717         worker [1]
[4]     20.0    0.03    0.00     717         SortedList_length [4]
-----------------------------------------------
                                                 <spontaneous>
[5]      8.1    0.01    0.00                 main [5]
                0.00    0.00      50/717         SortedList_length [4]
                0.00    0.00      50/9289        new_element [9]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00   18336/18336       worker [1]
[6]      6.7    0.01    0.00   18336         hash [6]
-----------------------------------------------
                0.00    0.00   18860/18860       worker [1]
[7]      0.0    0.00    0.00   18860         unlock_s [7]
-----------------------------------------------
                0.00    0.00    9748/9748        worker [1]
[8]      0.0    0.00    0.00    9748         SortedList_delete_tas [8]
-----------------------------------------------
                0.00    0.00      50/9289        main [5]
                0.00    0.00    9239/9289        worker [1]
[9]      0.0    0.00    0.00    9289         new_element [9]
-----------------------------------------------
                0.00    0.00    9247/9247        worker [1]
[10]     0.0    0.00    0.00    9247         SortedList_lookup_tas [10]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] SortedList_delete_tas  [11] SortedList_tas_init     [9] new_element
   [3] SortedList_insert_tas   [6] hash                    [7] unlock_s
   [4] SortedList_length       [2] lock_s
  [10] SortedList_lookup_tas   [5] main
60 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 45176797 ns
per operation: 753 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 41.71      0.05     0.05    20777     2.41     2.41  lock_s
 25.03      0.08     0.03    10694     2.81     2.81  SortedList_lookup_tas
 25.03      0.11     0.03      790    38.02    38.02  SortedList_length
  8.34      0.12     0.01    20194     0.50     0.50  hash
  0.00      0.12     0.00    20312     0.00     0.00  unlock_s
  0.00      0.12     0.00    11525     0.00     0.00  SortedList_delete_tas
  0.00      0.12     0.00     9186     0.00     0.00  SortedList_insert_tas
  0.00      0.12     0.00     9160     0.00     0.00  new_element
  0.00      0.12     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 8.32% of 0.12 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     98.1    0.00    0.12                 worker [1]
                0.05    0.00   20777/20777       lock_s [2]
                0.03    0.00   10694/10694       SortedList_lookup_tas [3]
                0.03    0.00     730/790         SortedList_length [4]
                0.01    0.00   20194/20194       hash [5]
                0.00    0.00   20312/20312       unlock_s [7]
                0.00    0.00   11525/11525       SortedList_delete_tas [8]
                0.00    0.00    9186/9186        SortedList_insert_tas [9]
                0.00    0.00    9100/9160        new_element [10]
-----------------------------------------------
                0.05    0.00   20777/20777       worker [1]
[2]     41.7    0.05    0.00   20777         lock_s [2]
-----------------------------------------------
                0.03    0.00   10694/10694       worker [1]
[3]     25.0    0.03    0.00   10694         SortedList_lookup_tas [3]
-----------------------------------------------
                0.00    0.00      60/790         main [6]
                0.03    0.00     730/790         worker [1]
[4]     25.0    0.03    0.00     790         SortedList_length [4]
-----------------------------------------------
                0.01    0.00   20194/20194       worker [1]
[5]      8.3    0.01    0.00   20194         hash [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      1.9    0.00    0.00                 main [6]
                0.00    0.00      60/790         SortedList_length [4]
                0.00    0.00      60/9160        new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   20312/20312       worker [1]
[7]      0.0    0.00    0.00   20312         unlock_s [7]
-----------------------------------------------
                0.00    0.00   11525/11525       worker [1]
[8]      0.0    0.00    0.00   11525         SortedList_delete_tas [8]
-----------------------------------------------
                0.00    0.00    9186/9186        worker [1]
[9]      0.0    0.00    0.00    9186         SortedList_insert_tas [9]
-----------------------------------------------
                0.00    0.00      60/9160        main [6]
                0.00    0.00    9100/9160        worker [1]
[10]     0.0    0.00    0.00    9160         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] SortedList_delete_tas   [3] SortedList_lookup_tas   [2] lock_s
   [9] SortedList_insert_tas  [11] SortedList_tas_init    [10] new_element
   [4] SortedList_length       [5] hash                    [7] unlock_s
70 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 39657718 ns
per operation: 661 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 30.03      0.03     0.03    14523     2.07     2.07  lock_s
 30.03      0.06     0.03      930    32.30    32.30  SortedList_length
 20.02      0.08     0.02     7503     2.67     2.67  SortedList_lookup_tas
 10.01      0.09     0.01    14186     0.71     0.71  hash
 10.01      0.10     0.01     7398     1.35     1.35  SortedList_delete_tas
  0.00      0.10     0.00    14461     0.00     0.00  unlock_s
  0.00      0.10     0.00     7072     0.00     0.00  SortedList_insert_tas
  0.00      0.10     0.00     6990     0.00     0.00  new_element
  0.00      0.10     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 9.99% of 0.10 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     97.7    0.00    0.10                 worker [1]
                0.03    0.00   14523/14523       lock_s [2]
                0.03    0.00     860/930         SortedList_length [3]
                0.02    0.00    7503/7503        SortedList_lookup_tas [4]
                0.01    0.00   14186/14186       hash [5]
                0.01    0.00    7398/7398        SortedList_delete_tas [6]
                0.00    0.00   14461/14461       unlock_s [8]
                0.00    0.00    7072/7072        SortedList_insert_tas [9]
                0.00    0.00    6920/6990        new_element [10]
-----------------------------------------------
                0.03    0.00   14523/14523       worker [1]
[2]     30.0    0.03    0.00   14523         lock_s [2]
-----------------------------------------------
                0.00    0.00      70/930         main [7]
                0.03    0.00     860/930         worker [1]
[3]     30.0    0.03    0.00     930         SortedList_length [3]
-----------------------------------------------
                0.02    0.00    7503/7503        worker [1]
[4]     20.0    0.02    0.00    7503         SortedList_lookup_tas [4]
-----------------------------------------------
                0.01    0.00   14186/14186       worker [1]
[5]     10.0    0.01    0.00   14186         hash [5]
-----------------------------------------------
                0.01    0.00    7398/7398        worker [1]
[6]     10.0    0.01    0.00    7398         SortedList_delete_tas [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      2.3    0.00    0.00                 main [7]
                0.00    0.00      70/930         SortedList_length [3]
                0.00    0.00      70/6990        new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.00    0.00   14461/14461       worker [1]
[8]      0.0    0.00    0.00   14461         unlock_s [8]
-----------------------------------------------
                0.00    0.00    7072/7072        worker [1]
[9]      0.0    0.00    0.00    7072         SortedList_insert_tas [9]
-----------------------------------------------
                0.00    0.00      70/6990        main [7]
                0.00    0.00    6920/6990        worker [1]
[10]     0.0    0.00    0.00    6990         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [7]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] SortedList_delete_tas   [4] SortedList_lookup_tas   [2] lock_s
   [9] SortedList_insert_tas  [11] SortedList_tas_init    [10] new_element
   [3] SortedList_length       [5] hash                    [8] unlock_s
80 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 36776120 ns
per operation: 613 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 27.30      0.03     0.03    13076     2.30     2.30  lock_s
 27.30      0.06     0.03     1025    29.30    29.30  SortedList_length
 18.20      0.08     0.02     6259     3.20     3.20  SortedList_insert_tas
 18.20      0.10     0.02                             main
  9.10      0.11     0.01    12538     0.80     0.80  hash
  0.00      0.11     0.00    12861     0.00     0.00  unlock_s
  0.00      0.11     0.00     6679     0.00     0.00  SortedList_lookup_tas
  0.00      0.11     0.00     6655     0.00     0.00  SortedList_delete_tas
  0.00      0.11     0.00     6367     0.00     0.00  new_element
  0.00      0.11     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 9.08% of 0.11 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     79.7    0.00    0.09                 worker [1]
                0.03    0.00   13076/13076       lock_s [2]
                0.03    0.00     945/1025        SortedList_length [3]
                0.02    0.00    6259/6259        SortedList_insert_tas [5]
                0.01    0.00   12538/12538       hash [6]
                0.00    0.00   12861/12861       unlock_s [7]
                0.00    0.00    6679/6679        SortedList_lookup_tas [8]
                0.00    0.00    6655/6655        SortedList_delete_tas [9]
                0.00    0.00    6287/6367        new_element [10]
-----------------------------------------------
                0.03    0.00   13076/13076       worker [1]
[2]     27.3    0.03    0.00   13076         lock_s [2]
-----------------------------------------------
                0.00    0.00      80/1025        main [4]
                0.03    0.00     945/1025        worker [1]
[3]     27.3    0.03    0.00    1025         SortedList_length [3]
-----------------------------------------------
                                                 <spontaneous>
[4]     20.3    0.02    0.00                 main [4]
                0.00    0.00      80/1025        SortedList_length [3]
                0.00    0.00      80/6367        new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.02    0.00    6259/6259        worker [1]
[5]     18.2    0.02    0.00    6259         SortedList_insert_tas [5]
-----------------------------------------------
                0.01    0.00   12538/12538       worker [1]
[6]      9.1    0.01    0.00   12538         hash [6]
-----------------------------------------------
                0.00    0.00   12861/12861       worker [1]
[7]      0.0    0.00    0.00   12861         unlock_s [7]
-----------------------------------------------
                0.00    0.00    6679/6679        worker [1]
[8]      0.0    0.00    0.00    6679         SortedList_lookup_tas [8]
-----------------------------------------------
                0.00    0.00    6655/6655        worker [1]
[9]      0.0    0.00    0.00    6655         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00      80/6367        main [4]
                0.00    0.00    6287/6367        worker [1]
[10]     0.0    0.00    0.00    6367         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [4]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [5] SortedList_insert_tas   [6] hash                    [7] unlock_s
   [3] SortedList_length       [2] lock_s
   [8] SortedList_lookup_tas   [4] main
90 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 34957309 ns
per operation: 583 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 30.03      0.03     0.03     5766     5.21     5.21  SortedList_lookup_tas
 20.02      0.05     0.02    11597     1.73     1.73  lock_s
 20.02      0.07     0.02    10955     1.83     1.83  hash
 10.01      0.08     0.01     5825     1.72     1.72  SortedList_delete_tas
 10.01      0.09     0.01     1239     8.08     8.08  SortedList_length
 10.01      0.10     0.01                             main
  0.00      0.10     0.00    11288     0.00     0.00  unlock_s
  0.00      0.10     0.00     5539     0.00     0.00  SortedList_insert_tas
  0.00      0.10     0.00     5444     0.00     0.00  new_element
  0.00      0.10     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 9.99% of 0.10 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     89.3    0.00    0.09                 worker [1]
                0.03    0.00    5766/5766        SortedList_lookup_tas [2]
                0.02    0.00   11597/11597       lock_s [3]
                0.02    0.00   10955/10955       hash [4]
                0.01    0.00    5825/5825        SortedList_delete_tas [6]
                0.01    0.00    1149/1239        SortedList_length [7]
                0.00    0.00   11288/11288       unlock_s [8]
                0.00    0.00    5539/5539        SortedList_insert_tas [9]
                0.00    0.00    5354/5444        new_element [10]
-----------------------------------------------
                0.03    0.00    5766/5766        worker [1]
[2]     30.0    0.03    0.00    5766         SortedList_lookup_tas [2]
-----------------------------------------------
                0.02    0.00   11597/11597       worker [1]
[3]     20.0    0.02    0.00   11597         lock_s [3]
-----------------------------------------------
                0.02    0.00   10955/10955       worker [1]
[4]     20.0    0.02    0.00   10955         hash [4]
-----------------------------------------------
                                                 <spontaneous>
[5]     10.7    0.01    0.00                 main [5]
                0.00    0.00      90/1239        SortedList_length [7]
                0.00    0.00      90/5444        new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00    5825/5825        worker [1]
[6]     10.0    0.01    0.00    5825         SortedList_delete_tas [6]
-----------------------------------------------
                0.00    0.00      90/1239        main [5]
                0.01    0.00    1149/1239        worker [1]
[7]     10.0    0.01    0.00    1239         SortedList_length [7]
-----------------------------------------------
                0.00    0.00   11288/11288       worker [1]
[8]      0.0    0.00    0.00   11288         unlock_s [8]
-----------------------------------------------
                0.00    0.00    5539/5539        worker [1]
[9]      0.0    0.00    0.00    5539         SortedList_insert_tas [9]
-----------------------------------------------
                0.00    0.00      90/5444        main [5]
                0.00    0.00    5354/5444        worker [1]
[10]     0.0    0.00    0.00    5444         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [5]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [9] SortedList_insert_tas   [4] hash                    [8] unlock_s
   [7] SortedList_length       [3] lock_s
   [2] SortedList_lookup_tas   [5] main
100 lists
10 threads x 3000 iterations x (insert + lookup/delete) = 60000 operations
elapsed time: 34695634 ns
per operation: 578 ns
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 26.70      0.04     0.04    10940     3.66     3.66  hash
 26.70      0.08     0.04     1057    37.89    37.89  SortedList_length
 20.02      0.11     0.03     5416     5.55     5.55  SortedList_insert_tas
 13.35      0.13     0.02     5818     3.44     3.44  SortedList_lookup_tas
  6.67      0.14     0.01    11233     0.89     0.89  lock_s
  6.67      0.15     0.01                             main
  0.00      0.15     0.00    11125     0.00     0.00  unlock_s
  0.00      0.15     0.00     5809     0.00     0.00  SortedList_delete_tas
  0.00      0.15     0.00     5516     0.00     0.00  new_element
  0.00      0.15     0.00        1     0.00     0.00  SortedList_tas_init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 6.66% of 0.15 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     90.8    0.00    0.14                 worker [1]
                0.04    0.00   10940/10940       hash [2]
                0.04    0.00     957/1057        SortedList_length [3]
                0.03    0.00    5416/5416        SortedList_insert_tas [4]
                0.02    0.00    5818/5818        SortedList_lookup_tas [5]
                0.01    0.00   11233/11233       lock_s [7]
                0.00    0.00   11125/11125       unlock_s [8]
                0.00    0.00    5809/5809        SortedList_delete_tas [9]
                0.00    0.00    5416/5516        new_element [10]
-----------------------------------------------
                0.04    0.00   10940/10940       worker [1]
[2]     26.7    0.04    0.00   10940         hash [2]
-----------------------------------------------
                0.00    0.00     100/1057        main [6]
                0.04    0.00     957/1057        worker [1]
[3]     26.7    0.04    0.00    1057         SortedList_length [3]
-----------------------------------------------
                0.03    0.00    5416/5416        worker [1]
[4]     20.0    0.03    0.00    5416         SortedList_insert_tas [4]
-----------------------------------------------
                0.02    0.00    5818/5818        worker [1]
[5]     13.3    0.02    0.00    5818         SortedList_lookup_tas [5]
-----------------------------------------------
                                                 <spontaneous>
[6]      9.2    0.01    0.00                 main [6]
                0.00    0.00     100/1057        SortedList_length [3]
                0.00    0.00     100/5516        new_element [10]
                0.00    0.00       1/1           SortedList_tas_init [11]
-----------------------------------------------
                0.01    0.00   11233/11233       worker [1]
[7]      6.7    0.01    0.00   11233         lock_s [7]
-----------------------------------------------
                0.00    0.00   11125/11125       worker [1]
[8]      0.0    0.00    0.00   11125         unlock_s [8]
-----------------------------------------------
                0.00    0.00    5809/5809        worker [1]
[9]      0.0    0.00    0.00    5809         SortedList_delete_tas [9]
-----------------------------------------------
                0.00    0.00     100/5516        main [6]
                0.00    0.00    5416/5516        worker [1]
[10]     0.0    0.00    0.00    5516         new_element [10]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[11]     0.0    0.00    0.00       1         SortedList_tas_init [11]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [9] SortedList_delete_tas  [11] SortedList_tas_init    [10] new_element
   [4] SortedList_insert_tas   [2] hash                    [8] unlock_s
   [3] SortedList_length       [7] lock_s
   [5] SortedList_lookup_tas   [6] main
